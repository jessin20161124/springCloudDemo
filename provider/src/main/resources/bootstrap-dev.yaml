spring:
  cloud:
    nacos:
      config:
        server-addr: 101.43.195.208:8848
        file-extension: properties
#      discovery:
#        server-addr: 101.43.195.208:8848
    consul:
      discovery:
        #注册到 Consul 的服务名称，后期客户端会根据这个名称来进行服务调用
        serviceName: ${spring.application.name}
        prefer-ip-address: true
        ip-address: localhost

      #consul注册中心地址
      host: 101.43.195.208
      port: 8500
  kafka:
    # kafka broker集群地址，不需要zk
    bootstrap-servers: 101.43.195.208:9092
    producer:
      # 不配置也是默认需要leader副本确认即可。0：无需等待，1：等待leader节点确认，-1（all）：等待leader和所有follower节点（ISR）确认
      acks: 1
    consumer:
      enable-auto-commit: false
      auto-offset-reset: latest
    listener:
      ack-mode: manual
      # 启动的KafkaConsumer的并发个数，默认是1
      concurrency: 2
      # 支持批量消费
      type: batch
  # todo 原生shardingsphere  springboot starter，对于分太多库，会有toomany connection ，这里不使用
  # todo 原生是数据库维度的，实例ip相同，会重复建立连接池，导致mysql服务端抛出too many connections异常
  shardingsphere:
    enabled: false
  shardingsphereplus:
    # todo 这里假设有两个实例数据源，实例维度，跟db没有关系

    datasource:
      instance0:
        driver-class-name: com.mysql.cj.jdbc.Driver
        type: com.zaxxer.hikari.HikariDataSource
        # 跟Datasource类型相关，对于HikariDataSource，这里是jdbc-url，应该是会自动注入到HikariDataSource中
        jdbc-url: jdbc:mysql://${dbIp}:3306?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
        username: ${dbUser}
        password: ${dbUserPassword}
        min-idle: 5
        max-pool-size: 200
        idle-timeout: 30000
        pool-name: MyHikariCP0
        max-lifetime: 1800000
        connection-timeout: 15000
        connection-test-query: SELECT 1

      instance1:
        driver-class-name: com.mysql.cj.jdbc.Driver
        type: com.zaxxer.hikari.HikariDataSource
        jdbc-url: jdbc:mysql://${dbIp}:3306?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
        username: ${dbUser}
        password: ${dbUserPassword}
        min-idle: 5
        max-pool-size: 200
        idle-timeout: 30000
        pool-name: MyHikariCP1
        max-lifetime: 1800000
        connection-timeout: 15000
        connection-test-query: SELECT 1
      names: instance0,instance1

    logic-datasource:
      ds0:
        instance: instance0
        dbName: spring_cloud_0
      ds1:
        instance: instance0
        dbName: spring_cloud_1
      ds2:
        instance: instance0
        dbName: spring_cloud_2
      ds3:
        instance: instance0
        dbName: spring_cloud_3
      ds4:
        instance: instance0
        dbName: spring_cloud_4
      ds5:
        instance: instance0
        dbName: spring_cloud_5
      ds6:
        instance: instance0
        dbName: spring_cloud_6
      ds7:
        instance: instance0
        dbName: spring_cloud_7
      ds8:
        instance: instance0
        dbName: spring_cloud_8
      ds9:
        instance: instance0
        dbName: spring_cloud_9
      ds10:
        instance: instance0
        dbName: spring_cloud_10
      ds11:
        instance: instance0
        dbName: spring_cloud_11
      ds12:
        instance: instance0
        dbName: spring_cloud_12
      ds13:
        instance: instance0
        dbName: spring_cloud_13
      ds14:
        instance: instance0
        dbName: spring_cloud_14
      ds15:
        instance: instance0
        dbName: spring_cloud_15
      ds16:
        instance: instance1
        dbName: spring_cloud_16
      ds17:
        instance: instance1
        dbName: spring_cloud_17
      ds18:
        instance: instance1
        dbName: spring_cloud_18
      ds19:
        instance: instance1
        dbName: spring_cloud_19
      ds20:
        instance: instance1
        dbName: spring_cloud_20
      ds21:
        instance: instance1
        dbName: spring_cloud_21
      ds22:
        instance: instance1
        dbName: spring_cloud_22
      ds23:
        instance: instance1
        dbName: spring_cloud_23
      ds24:
        instance: instance1
        dbName: spring_cloud_24
      ds25:
        instance: instance1
        dbName: spring_cloud_25
      ds26:
        instance: instance1
        dbName: spring_cloud_26
      ds27:
        instance: instance1
        dbName: spring_cloud_27
      ds28:
        instance: instance1
        dbName: spring_cloud_28
      ds29:
        instance: instance1
        dbName: spring_cloud_29
      ds30:
        instance: instance1
        dbName: spring_cloud_30
      ds31:
        instance: instance1
        dbName: spring_cloud_31
      userDs:
        instance: instance0
        dbName: spring_cloud
    props:
      sql:
        show: true
    # todo 先分库再分表，看order_no最后10位：11111 11111  库看前面5位，表看后面5位，32个库，32张表，共1024张表
    sharding:
      tables:
        tb_order:
          actual-data-nodes: ds$->{0..31}.tb_order_$->{0..31}
          database-strategy:
            inline:
              # 必须是double.valueOf，再int，内部计算得到的貌似是浮点数
              algorithm-expression: ds$->{Double.valueOf(order_no % 1024 / 32).intValue()}
              sharding-column: order_no
          table-strategy:
            inline:
              algorithm-expression: tb_order_$->{Double.valueOf(order_no % 32).intValue()}
              sharding-column: order_no
        # user表，映射到spring_cloud
        tb_user:
          actual-data-nodes: userDs.tb_user
          database-strategy:
            inline:
              algorithm-expression: userDs
              sharding-column: 1
          table-strategy:
            inline:
              algorithm-expression: tb_user
              sharding-column: 1

          # todo 如果不是表里的字段，是threadLocal，又该如何映射，如何自定义扩展呢？
redisson:
  host: 101.43.195.208:6379
  password: ${redissonPassword}

#server:
#  tomcat:
#    accesslog:
#      enabled: true
#      directory: /Users/jessin/Documents/Program/springCloudDemo/provider/logs
